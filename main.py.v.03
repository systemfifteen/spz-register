from fastapi import FastAPI, HTTPException, Depends
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Optional
from passlib.context import CryptContext
from uuid import uuid4
from sqlmodel import SQLModel, Field, Session, create_engine, select

app = FastAPI()

# CORS pre frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- Databáza ---
# sqlite_file_name = "db.sqlite"
# sqlite_url = f"sqlite:///{sqlite_file_name}"
sqlite_file_name = "data/db.sqlite"
sqlite_url = f"sqlite:///{sqlite_file_name}"
engine = create_engine(sqlite_url, echo=True)

# --- Bezpečnosť ---
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
tokens = {}

# --- Modely ---
class User(SQLModel, table=True):
    id: Optional[str] = Field(default_factory=lambda: str(uuid4()), primary_key=True)
    email: str
    hashed_password: str
    is_admin: bool = False

class UserCreate(BaseModel):
    email: str
    password: str

class Vehicle(SQLModel, table=True):
    id: Optional[str] = Field(default_factory=lambda: str(uuid4()), primary_key=True)
    user_id: str
    spz: str

class VehicleCreate(BaseModel):
    spz: str

class Permission(SQLModel, table=True):
    user_id: str = Field(primary_key=True)
    daily_entries: int
    time_window: Optional[str] = "04:00 - 09:00"

class PermissionUpdate(BaseModel):
    daily_entries: int
    time_window: Optional[str] = None

# --- Pomocné funkcie ---
def get_user_by_token(token: str = Depends(oauth2_scheme)) -> User:
    user_id = tokens.get(token)
    if not user_id:
        raise HTTPException(status_code=401, detail="Invalid token")
    with Session(engine) as session:
        user = session.get(User, user_id)
        if not user:
            raise HTTPException(status_code=401, detail="User not found")
        return user

# --- Inicializácia DB ---
@app.on_event("startup")
def on_startup():
    SQLModel.metadata.create_all(engine)

# --- API ---
@app.post("/register")
def register(user: UserCreate):
    with Session(engine) as session:
        existing = session.exec(select(User).where(User.email == user.email)).first()
        if existing:
            raise HTTPException(status_code=400, detail="Email already registered")
        hashed = pwd_context.hash(user.password)
        new_user = User(email=user.email, hashed_password=hashed)
        session.add(new_user)
        session.commit()
        return {"message": "User registered"}

@app.post("/token")
def login(form_data: OAuth2PasswordRequestForm = Depends()):
    with Session(engine) as session:
        user = session.exec(select(User).where(User.email == form_data.username)).first()
        if not user or not pwd_context.verify(form_data.password, user.hashed_password):
            raise HTTPException(status_code=401, detail="Incorrect email or password")
        token = str(uuid4())
        tokens[token] = user.id
        return {"access_token": token, "token_type": "bearer"}

@app.get("/me")
def get_me(user: User = Depends(get_user_by_token)):
    return user

@app.post("/vehicles")
def add_vehicle(vehicle: VehicleCreate, user: User = Depends(get_user_by_token)):
    with Session(engine) as session:
        new_vehicle = Vehicle(user_id=user.id, spz=vehicle.spz)
        session.add(new_vehicle)
        session.commit()
        return new_vehicle

@app.get("/vehicles")
def list_vehicles(user: User = Depends(get_user_by_token)):
    with Session(engine) as session:
        return session.exec(select(Vehicle).where(Vehicle.user_id == user.id)).all()

@app.get("/admin/vehicles")
def list_all_vehicles(user: User = Depends(get_user_by_token)):
    if not user.is_admin:
        raise HTTPException(status_code=403, detail="Admins only")
    with Session(engine) as session:
        return session.exec(select(Vehicle)).all()

@app.post("/admin/permissions/{user_id}")
def set_permission(user_id: str, data: PermissionUpdate, user: User = Depends(get_user_by_token)):
    if not user.is_admin:
        raise HTTPException(status_code=403, detail="Admins only")
    with Session(engine) as session:
        perm = session.get(Permission, user_id)
        if perm:
            perm.daily_entries = data.daily_entries
            if data.time_window:
                perm.time_window = data.time_window
        else:
            perm = Permission(user_id=user_id, daily_entries=data.daily_entries, time_window=data.time_window or "04:00 - 09:00")
            session.add(perm)
        session.commit()
        return {"message": "Permission updated"}

@app.get("/permissions")
def get_permission(user: User = Depends(get_user_by_token)):
    with Session(engine) as session:
        perm = session.get(Permission, user.id)
        if not perm:
            raise HTTPException(status_code=404, detail="Permission not set")
        return perm

@app.post("/debug/make-admin")
def make_admin(email: str):
    from sqlmodel import select
    with Session(engine) as session:
        user = session.exec(select(User).where(User.email == email)).first()
        if not user:
            raise HTTPException(status_code=404, detail="User not found")
        user.is_admin = True
        session.add(user)
        session.commit()
        return {"message": f"{email} is now admin"}
